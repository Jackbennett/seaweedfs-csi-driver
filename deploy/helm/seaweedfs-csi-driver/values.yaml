# host and port of your SeaweedFs filer
seaweedfsFiler: "SEAWEEDFS_FILER:8888"
storageClassName: seaweedfs-storage
isDefaultStorageClass: false
tlsSecret: ""
#logVerbosity: 4

imagePullPolicy: "IfNotPresent"

#imagePullSecrets:
#- name: mycredentials

csiProvisioner:
  image: k8s.gcr.io/sig-storage/csi-provisioner:v3.1.0
  resources: {}

csiAttacher:
  image: k8s.gcr.io/sig-storage/csi-attacher:v3.4.0
  resources: {}

csiResizer:
  image: k8s.gcr.io/sig-storage/csi-resizer:v1.4.0
  resources: {}

csiNodeDriverRegistrar:
  image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.5.0
  resources: {}

seaweedfsCsiPlugin:
  image: chrislusf/seaweedfs-csi-driver:latest
  resources: {}
  securityContext:
    privileged: true
    capabilities:
      add: ["SYS_ADMIN"]
    allowPrivilegeEscalation: true

# DO NOT Change. Reserved for future releases. Must be equal Name in GetPluginInfoResponse
driverName: seaweedfs-csi-driver

controller:
  affinity: {}
  tolerations: {}

node:
  # Deploy node daemonset
  enabled: true
  # When seaweedfs-csi-driver-node pod on node is recreated, all pods on same node using seaweed-csi PV will stop working.
  # For safe update set updateStrategy.type: OnDelete and manually move pods who use seaweed-csi PV, then delete  seaweedfs-csi-driver-node damonset pod
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
  affinity: {}
  tolerations: {}

  ## Change if not using standard kubernetes deployments, like k0s
  volumes:
    registration_dir: /var/lib/kubelet/plugins_registry
    plugins_dir: /var/lib/kubelet/plugins
    pods_mount_dir: /var/lib/kubelet/pods
